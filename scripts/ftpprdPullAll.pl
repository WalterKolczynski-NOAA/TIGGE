#!/usr/bin/perl -w
#
#	Forks multiple child processes to pull the GENS data using the 
#		NcdcTigge Perl Module routines
#	Designed to be run manual (in background!!!) or under a cron-job.
#	Date in ARG 1 is optional, defaults to latest run.
#
#	Dan Swank	Oct 2007
#

if( !(scalar grep(/$ENV{'TIGGE_TOOLS'}/,@INC)) )
    { push(@INC,"$ENV{'TIGGE_TOOLS'}"); }

use ncdcTiggeFTP 0.98 (ingestFtpprd);
use ncdcTigge 1.3 (cleanupLocation);

# require ("$ENV{'TIGGE_TOOLS'}/ncdcTigge.pm");

# Change this to change sets of arguments sent to the puller.
#  Each line represents 1 thread.  Total number doesn't have to be 5

undef my @settings;
   @settings = 	(
       [ "a", 0 , 384 ,  0 , 10 ],
       [ "a", 0 , 384 , 11 , 20 ],
       [ "b", 0 , 384 ,  0 ,  5 ],
       [ "b", 0 , 384 ,  6 , 10 ],
       [ "b", 0 , 384 , 11 , 15 ],
       [ "b", 0 , 384 , 16 , 20 ]
				);

my $LOG_PERGE_AGE_DAYS = 1.0;

# Set public ncdcTigge package variables
$ncdcTiggeFTP::ftpGetDelay = 3;
$ncdcTiggeFTP::ftpDebug = 1;


$ENV{'TIGGE_INPUT'} ||
    die("### $0 : Environmental Variable TIGGE_INPUT must be set to a base directory path to place downloaded files!\n\n");
$ENV{'TIGGE_OUTPUT'} ||
    die("### $0 : Environmental Variable TIGGE_OUTPUT must be set to a directory path to place generated data!\n\n");
$ENV{'TIGGE_TOOLS'} ||
    die("### $0 : Environmental Variable TIGGE_TOOLS must be set to the directory path that holds the tigge executables!\n\n");



#  Clean up logfiles generated by this program
opendir(LOGDIR,"$ENV{'TIGGE_INPUT'}/logs");
my @logsfiles = grep(/\.std(out|err)$/,readdir(LOGDIR));
closedir(LOGDIR);
foreach $logfile ( @logsfiles ) 
	{
	my $thisFile = "$ENV{'TIGGE_INPUT'}/logs/$logfile";
	my $age = (-M "$thisFile" );
	if( $age > $LOG_PERGE_AGE_DAYS )
		{ unlink($thisFile); }
	}



my $date = "latest";
my $flagCleanup = 1;
if( defined($ARGV[0]) && $ARGV[0] =~ m/^\d{4}[0-1]\d[0-3]\d[0-2]\d$/ )
    { $date = $ARGV[0]; }
if( scalar grep(/-{1,2}no-?[cC]leanup/,@ARGV) )
	{ $flagCleanup = 0; }

my $num = $#settings+1;
undef my @processPIDs;

	# Get directory to place tmp stdout files
	#   Make sure it exists, attempt to create if not, abort on failure
my $tmpLogDir = $ENV{'TIGGE_INPUT'};
if( !(-d $tmpLogDir) ) 
	{
	mkdir($tmpLogDir) || 
die("### $0: Attempt to create output directory \"$tmpLogDir\" failed!\n\n");
	}
$tmpLogDir = "$tmpLogDir/logs";
if( !(-d $tmpLogDir) )
    {
    mkdir($tmpLogDir) ||
die("### $0: Attempt to create output directory \"$tmpLogDir\" failed!\n\n");
    }



print "$0 : Forking $num Processes.\n\n";

$| = 0;

my $pid;

	# Fork, child spawning loop
for(1 .. $num) 
	{
    $pid = fork();
    if ($pid) 
		{
		print "STARTED -- $pid $_\n";
		# parent - remember the PID
		push(@processPIDs,$pid);
#		sleep(1);
		} 
	elsif ($pid == 0) 
		{
		# fire up a child proc., sleep for various times so all processes
		#	 do not start near-instantaneously
	#	sleep($_*3);
		print STDOUT " I'm child proc. # $$\n";
		my $t1 = time;
	
		my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) 
			= localtime(time);
		my $timeFlag = sprintf("t%02d%02d",$hour,$min);
		my $ppid = getppid();

		# Save, redirect, then restore STDOUT,
		#   This captures the output of each process to a unique file
		my $outLog    = "${tmpLogDir}/${ppid}-${timeFlag}-fork$_.stdout";
        my $outLogErr = "${tmpLogDir}/${ppid}-${timeFlag}-fork$_.stderr";

		open(SAVEOUT, ">&STDOUT") || die;
		open(SAVEERR, ">&STDERR") || die;

		print SAVEOUT " + Started fork \# $_\n";
		print SAVEERR " - Started fork \# $_\n";

		open(STDOUT,">",$outLog) || print SAVEERR ("### $0: could not redirect STDOUT to $outLog\n\n"); 
		open(STDERR,">",$outLogErr) || print SAVEERR ("### $0: could not redirect STDOUT to $outLogErr\n\n");

		#  Set auto-flush
		$| = 1;

		#  Save off the command for reference
		print STDOUT "Library call:\nncdcTigge\:\:ingestFtpprd($date,$settings[$_-1][0],$settings[$_-1][1],$settings[$_-1][2],$settings[$_-1][3],$settings[$_-1][4]);  \n\n";

		# Run the command
		$rtn = ncdcTiggeFTP::ingestFtpprd($date,$settings[$_-1][0],$settings[$_-1][1],$settings[$_-1][2],$settings[$_-1][3],$settings[$_-1][4]);

		# Stop auto-flush & restore STDOUT/STDERR
		$| = 0;
		open(STDOUT,">&",SAVEOUT);
		open(STDERR,">&",SAVEERR);

		my $t2 = time;
		my $et = $t2 - $t1;

		if( $rtn == 0 || $rtn eq "" ) 
			{ }
		else {
			print STDERR " ! Received from ncdcTiggeFTP::ingestFtpprd fork-$_\n";
			print STDERR " ->$rtn<- \n\n";
			}

		print STDOUT "Output logged to: $outLog\n\n";
		print STDOUT "Process \# $_ : Completed.  [$et Seconds]\n";

		open(OT,">","/home/nomads/tigge-dev/testing-$_");
		print OT " It did in fact run...:\n\n\n";
		print OT $rtn;
		close(OT);

		exit(0);
    	}
	else 
		{ die("### $0 : could not fork process: $_ !\n\n"); }
    }

$| = 1;

# Wait on all processes to finish
print STDOUT "Waiting for child processes to complete... This will take some time\n\n";
foreach (@processPIDs) 
	{	waitpid($_, 0); 	}


print STDOUT "Logs written to : \n\t$tmpLogDir\n\n";

# Run cleanup routine after all have finished.
#	If flag is set by args, ON by default

if( $flagCleanup ) 
	{
	print STDOUT "Cleaning up Old data...\n\n";
	my @EXCLUDE =	(
	    "\^MoLode\$","logs",
	    "\.c\$","\.p[lm]\$","\.perl\$","\.o\$","\.a\$","\.exe\$",
	    "\.log\$","\^logs","\.csh\$","\.bash\$","\.sh\$","\.txt\$","\.meta\$"
				);
	print STDOUT ncdcTigge::cleanupLocation($ENV{'TIGGE_INPUT'},7.5,@EXCLUDE);
	}

exit 0;
